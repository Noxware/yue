name: Clipboard
component: gui
header: nativeui/clipboard.h
type: class
namespace: nu
description: Native clipboard.

detail: |
  The `Clipboard` class can not be created by user, its instance can only be
  recevied via the `Get` class method.

  ```cpp
  // Get the default copy-paste clipboard.
  nu::Clipboard* clipboard = nu::Clipboard::Get(nu::Clipboard::Type::CopyPaste);

  // Changing the content of clipboard with multiple formats of data.
  std::vector<nu::Clipboard::Data> objects;
  // Add text.
  objects.emplace_back(nu::Clipboard::Text, "some text");
  // Add HTML.
  objects.emplace_back(nu::Clipboard::HTML, "<strong>some text</strong>");
  // Add Image.
  objects.emplace_back(new nu::Image("..."));
  // Add file paths.
  objects.emplace_back({
    base::FilePath(FILE_PATH_LITERAL("/some/path")),
  });
  // Change data.
  clipboard->SetData(std::move(objects));

  // Read data.
  Data data = clipboard->GetData(nu::Clipboard::Data::Type::Text);
  if (data.type() == nu::Clipboard::Data::Type::Text)
    LOG(INFO) << data.str();
  ```

  ```lua
  -- Get the default copy-paste clipboard.
  local clipboard = gui.Clipboard.get('copy-paste')

  -- Changing the content of clipboard with multiple formats of data.
  clipboard:setdata{
    {type='text', value='some text'},
    {type='html', value='<strong>some text</strong>'},
    {type='image', value=gui.Image.createfrompath('...')},
    {type='file-paths', value={'/some/path'}},
  }

  -- Read data.
  local data = clipboard:getdata('text')
  if data.type == 'text' then
    print(data.value)
  end
  ```

  ```js
  // Get the default copy-paste clipboard.
  const clipboard = gui.Clipboard.get('copy-paste')

  // Changing the content of clipboard with multiple formats of data.
  clipboard.setData([
    {type: 'text', value: 'some text'},
    {type: 'html', value: '<strong>some text</strong>'},
    {type: 'image', value: gui.Image.createFromPath('...')},
    {type: 'file-paths', value: ['/some/path']},
  ])

  // Read data.
  const data = clipboard.getData('text')
  if (data.type == 'text')
    console.log(data.value)
  ```

class_methods:
  - signature: Clipboard* Get(Clipboard::Type type)
    description: Return the clipboard with `type`.
    lang_detail:
      cpp: |
        The returned clipboard instance is managed by Yue, there is no need to
        manually free it.

        The `CopyPaste` clipboard will be return if The `type` argument is
        omitted.

methods:
  - signature: void Clear()
    description: Clear the clipboard.

  - signature: void SetText(const std::string& text)
    description: Set `text` as clipboard's content.

  - signature: std::string GetText() const
    description: Return the content of clipboard as text.

  - signature: bool IsDataAvailable(Clipboard::Data::Type type) const
    description: Return whether the data of `type` is available.

  - signature: Clipboard::Data GetData(Clipboard::Data::Type type) const
    description: Get the data of `type` from clipboard.
    detail: You should always check the type of returned data before using it.

  - signature: void SetData(std::vector<Clipboard::Data> objects)
    description: Set clipboard's content.
    parameters:
      objects:
        description: An array of `<!type>Clipboard::Data`.

  - signature: NativeClipboard GetNative() const
    lang: ['cpp']
    description: Return the native handle of clipboard.
